language: c

sudo: false

branches:
  only:
  - master

env:
  global:
    - RACKET_DIR=~/racket
    - TRAVIS_RACKET_DIR=~/travis-racket
  matrix:
#    - RACKET_VERSION=6.6
#    - RACKET_VERSION=6.7
    - RACKET_VERSION=6.8
#    - RACKET_VERSION=HEAD

matrix:
  allow_failures:
    - env: RACKET_VERSION=HEAD
  # Fast finish: The overall build result is determined as soon as any
  # of the rows have failed or all of the rows that aren't allowed to
  # fail have succeeded.
  fast_finish: true



# Build lifecycle steps


before_install:
  # We install Racket.
  - git clone https://github.com/greghendershott/travis-racket.git "${TRAVIS_RACKET_DIR}"
  - cat "${TRAVIS_RACKET_DIR}/install-racket.sh" | bash
  - export PATH="${RACKET_DIR}/bin:${PATH}"

install:
  # We obtain the unit test dependencies.
  - hg clone https://bitbucket.org/zck/unit-test.arc
  - cd unit-test.arc
  - hg update v1.0
  - cd ..

script:
  # We run the unit tests. While doing so, we disable rlwrap using
  # `-n`.
  - ./arc.sh -n tests.arc


  # We do sanity checks to be sure the Racket package works. This (and
  # most of the rest of this file) is adapted from the sample
  # .travis.yml at <https://github.com/greghendershott/travis-racket>.

  # We install the current directory as a linked package, and we
  # automatically fetch all the dependencies.
  - raco pkg install --deps search-auto

  # We recompile every dependency of Anarki, but we don't recompile
  # their documentation. (TODO: Why does travis-racket suggest this?
  # Is there a chance `raco setup` fails when `raco pkg install`
  # doesn't?)
  - raco setup --no-docs --check-pkg-deps anarki

  # We run Racket tests according to the way the DrDr continuous
  # testing system does. This imitates the settings used by the Racket
  # package index at <https://pkgs.racket-lang.org/>.
  #
  # Due to the usual `raco test` behavior, this runs any submodules
  # named "test" of any Racket module files existing recursively under
  # this package. If a submodule named "test" is not present in a
  # module file, this falls back to running the whole file.
  #
  # Due to the `--drdr` option, this runs each test with a separate
  # temporary directory, gives it no stdin, suppresses its stdout, and
  # treats any stderr output as a test failure. See
  # <https://docs.racket-lang.org/raco/test.html>.
  #
  - raco test --drdr --package anarki


after_success:
  # TODO: Automatically build and deploy the arcfn docs using
  # https://github.com/arclanguage/arclanguage.github.io/blob/master/_ref/generate.sh
